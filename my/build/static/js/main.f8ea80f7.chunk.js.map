{"version":3,"sources":["components/form/button/button.js","components/form/button/index.js","components/form/input/input.js","components/form/input/index.js","components/form/label/label.js","components/form/label/index.js","components/form/link/link.js","components/form/link/index.js","components/container/container.js","components/container/index.js","components/form/form.js","components/form/index.js","components/pages/signup/signup.js","components/pages/signup/index.js","serviceWorker.js","index.js"],"names":["Button","props","classes","disabled","react_default","a","createElement","className","children","Input","type","id","placeholder","Label","htmlFor","Link","href","Container","Form","title","text","Signup","components_form","Boolean","window","location","hostname","match","ReactDOM","render","pages_signup","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAkBeA,IChBAA,EDCf,SAAgBC,GACd,IAAIC,EAAU,SAMd,OAJGD,EAAME,WACPD,GAAW,qBAITE,EAAAC,EAAAC,cAAA,UACAH,SAAUF,EAAME,SAAUI,UAAWL,GAChCD,EAAMO,iBEEFC,ICbAA,EDCf,SAAeR,GACb,OACIG,EAAAC,EAAAC,cAAA,SACGI,KAAMT,EAAMS,KACZC,GAAIV,EAAMU,GACVJ,UAAU,QACVK,YAAaX,EAAMW,qBEGbC,ICVAA,EDCf,SAAeZ,GACb,OACIG,EAAAC,EAAAC,cAAA,SACAC,UAAU,QAAQO,QAASb,EAAMa,SAC5Bb,EAAMO,iBEMFO,ICXAA,EDCf,SAAcd,GACZ,OACIG,EAAAC,EAAAC,cAAA,KACAC,UAAU,OAAOS,KAAMf,EAAMe,MAC5Bf,EAAMO,iBEIIS,ICTFA,EDEf,SAAmBhB,GACf,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVN,EAAMO,WECnB,SAASU,EAAKjB,GACZ,OACIG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAChBH,EAAAC,EAAAC,cAAA,MACAC,UAAU,eAAeN,EAAMkB,OAE/Bf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcN,EAAMmB,MAChCnB,EAAMO,UAKbU,EAAKT,MAAQA,EACbS,EAAKlB,OAASA,EACdkB,EAAKL,MAAQA,EACbK,EAAKH,KAAOA,EACZG,EAAKD,UAAYA,EACFC,ICvBAA,EDuBAA,EEHAG,ICrBAA,EDEf,WACI,OACIjB,EAAAC,EAAAC,cAACgB,EAAKL,UAAN,KACAb,EAAAC,EAAAC,cAACgB,EAAD,CAAMH,MAAM,uBAAoBC,KAAK,2BACrChB,EAAAC,EAAAC,cAACgB,EAAKT,MAAN,CAAYC,QAAQ,QAApB,QACAV,EAAAC,EAAAC,cAACgB,EAAKb,MAAN,CAAYE,GAAG,OAAOD,KAAK,SAC3BN,EAAAC,EAAAC,cAACgB,EAAKT,MAAN,CAAYC,QAAQ,SAApB,SACAV,EAAAC,EAAAC,cAACgB,EAAKb,MAAN,CAAYE,GAAG,QAAQD,KAAK,SAC5BN,EAAAC,EAAAC,cAACgB,EAAKT,MAAN,CAAYC,QAAQ,YAApB,aACAV,EAAAC,EAAAC,cAACgB,EAAKb,MAAN,CAAYE,GAAG,WAAWD,KAAK,WAC/BN,EAAAC,EAAAC,cAACgB,EAAKT,MAAN,CAAYC,QAAQ,YAApB,SACAV,EAAAC,EAAAC,cAACgB,EAAKb,MAAN,CAAYE,GAAG,WAAWD,KAAK,aAC/BN,EAAAC,EAAAC,cAACgB,EAAKtB,OAAN,CAAaG,UAAQ,GAArB,UACAC,EAAAC,EAAAC,cAACgB,EAAKP,KAAN,CAAWC,KAAK,KAAhB,mBEJYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAWC,SAASC,eAAe,SD0H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8ea80f7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './button.css'\r\n\r\nfunction Button(props){\r\n  let classes = 'button'\r\n\r\n  if(props.disabled){\r\n    classes += ' button--disabled'\r\n  }\r\n\r\n  return(\r\n      <button\r\n      disabled={props.disabled} className={classes}>\r\n          {props.children}\r\n      </button>\r\n  )\r\n}\r\n\r\nexport default Button","import Button from './button'\r\n\r\nexport default Button","import React from 'react'\r\nimport './input.css'\r\n\r\nfunction Input(props){\r\n  return(\r\n      <input\r\n         type={props.type}\r\n         id={props.id}\r\n         className='input'\r\n         placeholder={props.placeholder} \r\n\r\n      />\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import Input from './input'\r\n\r\nexport default Input","import React from 'react'\r\nimport './label.css'\r\n\r\nfunction Label(props){\r\n  return(\r\n      <label\r\n      className='label' htmlFor={props.htmlFor}>\r\n          {props.children}\r\n      </label>\r\n  )\r\n}\r\n\r\nexport default Label","import Label from './label'\r\n\r\nexport default Label","import React from 'react'\r\nimport './link.css'\r\n\r\nfunction Link(props){\r\n  return(\r\n      <a\r\n      className='link' href={props.href}>\r\n      {props.children}\r\n      </a>\r\n  \r\n  )\r\n}\r\n\r\nexport default Link;","import Link from './link'\r\n\r\nexport default Link","import React from 'react'\r\nimport './container.css'\r\n\r\n\r\nfunction Container(props){\r\n    return(\r\n        <div className='container'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n  }\r\n  export default Container","import Container from './container'\r\n\r\nexport default Container","import React from 'react'\r\nimport './form.css'\r\nimport Button from './button'\r\nimport Input from './input';\r\nimport Label from './label';\r\nimport Link from './link';\r\nimport Container from '../container'\r\n\r\nfunction Form(props){\r\n  return(\r\n      <form className='form'>\r\n      <h1\r\n      className='form__title'>{props.title}\r\n      </h1>\r\n      <p className='form__text'>{props.text}</p>\r\n      {props.children}\r\n      </form>\r\n  )\r\n}\r\n\r\nForm.Input = Input\r\nForm.Button = Button\r\nForm.Label = Label\r\nForm.Link = Link\r\nForm.Container = Container\r\nexport default Form","import Form from './form'\r\n\r\nexport default Form","import React from 'react';\r\nimport Form from '../../form'\r\n\r\nfunction Signup(){\r\n    return(\r\n        <Form.Container>\r\n        <Form title='FaÃ§a Seu Cadastro' text='Preencha com Seus Dados'>\r\n        <Form.Label htmlFor='nome'>Nome</Form.Label>\r\n        <Form.Input id='nome' type='text' />\r\n        <Form.Label htmlFor='email'>Email</Form.Label>\r\n        <Form.Input id='email' type='text' />\r\n        <Form.Label htmlFor='telefone'>Telefone:</Form.Label>\r\n        <Form.Input id='telefone' type='number' />\r\n        <Form.Label htmlFor='password'>Senha</Form.Label>\r\n        <Form.Input id='password' type='password' />\r\n        <Form.Button disabled>Enviar</Form.Button>\r\n        <Form.Link href=\"#\"> Fazer login</Form.Link>\r\n        </Form>\r\n        </Form.Container>\r\n    )\r\n}\r\n\r\nexport default Signup","import Signup from './signup'\r\nexport default Signup","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Signup from '../src/components/pages/signup';\r\nimport * as serviceWorker from './serviceWorker';\r\n                   \r\n\r\nReactDOM.render(<Signup/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}